---
title: "[딥러닝] 퍼셉트론 이론"
date: 2020-09-08 23:34:28 -0400
categories:
  - project
tags:
  - Jekyll
  - upload
---


오늘 새로운 강사님이 오셔서 딥러닝 수업이 시작됐다.

현재 딥러닝 기술이 적용되고 있는 다양한 분야들을 보여주시고 간략하게 딥러닝의 역사를 훑어주셨다.

정말 간단하게 요약하자면 수십년 전부터 인공 신경망을 구현하고자 했지만 컴퓨팅 파워의 부족으로 난항에 부딪혔다. 이론은 있는데 실현할 도구가 없었던 것.

그러던 것이 인터넷이 발달해서 데이터의 양이 기하급수적으로 늘어나고 컴퓨터의 성능도 급속도로 발전하면서 딥러닝을 적용한 기술들의 성능도 크게 개선되었다.

<퍼셉트론 이론>

인공 신경망 기술의 기초가 되는 이론이 바로 <퍼셉트론 이론>이다. 1957년에 프랑크 로젠블라트가 고안한 알고리즘으로 다수의 신호를 입력 받아 하나의 신호를 출력하는 형태를 띈다.

퍼셉트론은 전류가 전선을 타고 흐르는 형태와 비슷하게 흐르지만 각 퍼셉트론 신호는 흐른다/안 흐른다(1이나 0)의 값을 가진다.



2개의 입력을 받아 1개의 신호를 출력하는 단순 퍼셉트론의 구조를 살펴보자.

각 입력 신호(x1, x2)는 뉴런(y)에 보내질 때 각각 고유한 가중치(w1, w2)가 곱해진다. 이렇게 받은 신호 값의 합이 정해진 한계(임계값, θ)을 넘어서면 1을 출력한다.

이를 수식으로 나타내면 다음과 같다.

y = 0 (w1x1+w2x2 <= θ)
    1 (w1x1+w2x2  > θ)
    
이러한 퍼셉트론의 구조에서 도출될 수 있는 출력값을 정리한 표를 진리표라 부르고 AND / NAND / OR 의 논리회로를 나타낼 수 있다.

AND 게이트         NAND 게이트           OR 게이트
x1  x2   y        x1  x2   y           x1  x2   y
0   0    0        0   0    1           0   0    0
1   0    0        1   0    1           1   0    1
0   1    0        0   1    1           0   1    1
1   1    1        1   1    0           1   1    1

이 때 어떠한 가중치와 임계치를 설정해주어야 위와 같은 결과를 얻을 수 있을지 고민하는 것은 인간의 역할이었다.
기계학습은 바로 이 과정을 컴퓨터가 학습해서 스스로 그 값을 찾아낼 수 있게 한 것!


퍼셉트론의 구조 자체는 어떤 논리회로를 나타내든 모두 똑같다. 달라지는 것은 매개변수인 '임계값과 가중치' 뿐이다.


<가중치와 편향>

위에서 퍼셉트론을 나타냈던 수식을 앞으로의 편의성을 위해 다음과 같이 바꿔보자.

y = 0 (w1x1+w2x2+b <= 0)
    1 (w1x1+w2x2+b  > 0)
    
부등호의 오른쪽에 있던 θ 값을 왼쪽으로 넘겨주면서 b(-θ)로 표현해줬다. 이를 편향이라고 부른다.

입력값에 곱해지는 w1, w2값은 가중치라고 부르며 입력 신호가 결과에 주는 영향력(중요도)을 조절하는 매개변수이다.

반면, 편향은 뉴런이 얼마나 쉽게 활성화(결과로 1을 출력) 하느냐를 조정하는 매개변수이다.


<퍼셉트론의 한계: XOR 게이트>

XOR 게이트는 배타적 논리합을 나타내는 논리회로로 입력값 둘 중 한쪽이 1일 때만 1을 출력한다. 진리표로 나타내면 다음과 같다.

x1  x2   y
0   0    0
1   0    1
0   1    1
1   1    0

그런데 퍼셉트론으로는 이 XOR 게이트를 구현할 수 없다. 각 게이트를 시각화 해보면 왜 그런지 쉽게 알 수 있다.

위에서 살펴본 AND, NAND, OR 게이트를 구현하는 퍼셉트론을 좌표평면에 나타내보면 0과 1이 출력되는 영역을 나누는 직선이 존재함을 알 수 있다.

그런데 XOR 게이트의 1과 0의 영역을 나누기 위해서는 곡선이 필요하다! 즉, 퍼셉트론 하나로는 XOR 게이트를 구현할 수 없다.



<다층 퍼샙트론>

하지만 퍼셉트론은 층을 쌓아 다층 퍼셉트론을 만들 수 있다. 앞서 살펴봤던 AND NAND OR 게이트를 조합하면 XOR 게이트로 구현할 수 있다!

X1  X2    S1(NAND)  S2(OR)    Y(AND)
0   0         1       0         0
1   0         1       1         1
0   1         1       1         1
1   1         0       1         0


위에서 살펴 본 내용들을 파이썬 코드로 구현하면 다음과 같다.

https://colab.research.google.com/drive/1KPM7yxC-VEShhig6ELqCQw8cK5fBzrwS?usp=sharing















이 글은 수업 교재인 사이토 고키 지음, 개앞맵시 옮김, "밑바닥부터 시작하는 딥러닝", 한빛미디어(2017) 를 참고하여 작성했습니다.
